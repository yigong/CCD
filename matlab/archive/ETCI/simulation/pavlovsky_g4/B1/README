$Id$
-------------------------------------------------------------------

     =========================================================
     Geant4 - an Object-Oriented Toolkit for Simulation in HEP
     =========================================================

                            Example B1
                            -----------

 This example demonstrates a very simple application where an energy
 deposit is accounted in user actions and a dose in a selected volume
 is calculated. 

	
 1- GEOMETRY DEFINITION
	
   The geometry is constructed in the B1DetectorConstruction class.
   The setup consists of a an envelope of box shape containing two
   volumes: a spherical cone and a trapezoid.

   In this example we use  some common materials materials for medical
   applications. The envelope is made of water and the two inner volumes
   are made from tissue and bone materials.  
   The materials are created with the help of the G4NistManager class,
   which allows to build a material from the NIST database using their
   names. All available materials can be found in the Geant4 User's Guide
   for Application Developers, Appendix 9: Geant4 Materials Database.
		
 2- PHYSICS LIST
 
   The particle's type and the physic processes which will be available
   in this example are set in the QGSP_BIC_EMY physics list. This physics
   list requires data files for low energy electromagnetic processes which
   path is defined via the G4LEDATA environment variable.
 
   In addition the build-in interactive command:
               /process/(in)activate processName
   allows to activate/inactivate the processes one by one.
 	 
 3- PRIMARY GENERATOR
  
   The primary generator is defined in the B1PrimaryGeneratorAction class.
   The default kinematic is a 6 MeV gamma, randomly distributed in front
   of the envelope across 80% of the (X,Y) envelope size. 
   This default setting can be changed via the Geant4 built-in commands 
   of the G4ParticleGun class.
     
 4- DETECTOR RESPONSE

   This example demonstrates a simple scoring implemented directly
   in the user action classes. Alternative ways of scoring via
   Geant4 classes can be found in the other examples.
   
   Here, the energy deposit in a selected volume is accumulated step by step
   in B1SteppingAction and the event energy deposit deposit is done event by 
   event in B1EventAction. The dose is then computed in 
   B1RunAction::EndOfRunAction() and and its value is printed on the screen. 


 The following paragraphs are common to all basic examples

 A- VISUALISATION

   The visualization manager is set via the G4VisExecutive class
   in the main() function in exampleB1.cc.    
   The initialisation of the drawing is done via a set of /vis/ commands
   in the macro vis.mac. This macro is automatically read from
   the main function when the example is used in interactive running mode.

   By default, vis.mac opens an OpenGL viewer.
   The user can switch to other graphics systems by commenting out this line
   and instead uncommenting one of the other /vis/open statements, such as
   HepRepFile or DAWNFILE (which produce files that can be viewed with the
   HepRApp and DAWN viewers, respectively).

   The DAWNFILE, HepRepFile drivers are always available
   (since they require no external libraries), but the OGL driver requires:
     1- the visualisation & interfaces categories have been compiled
        with the environment variable G4VIS_BUILD_OPENGLX_DRIVER.
     2- exampleB1.cc has been compiled with G4VIS_USE_OPENGLX.
   (This is best done through Configure or CMake.)

   For more information on visualization, including information on how to
   install and run DAWN, OpenGL and HepRApp, see the visualization tutorials,
   for example,
   http://geant4.slac.stanford.edu/Presentations/vis/G4[VIS]Tutorial/G4[VIS]Tutorial.html
   (where [VIS] can be replaced by DAWN, OpenGL and HepRApp)

   The tracks are automatically drawn at the end of each event, accumulated
   for all events and erased at the beginning of the next run.