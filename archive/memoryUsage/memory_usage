a script is being run
Filename: /global/scratch/ygzhang/PyBeamDiag/diffuse.py

Line #    Mem usage    Increment   Line Contents
================================================
     3  329.414 MiB    0.000 MiB   @profile
     4                             def XYZdE2track(xArray, yArray, zArray, dEArray, psfTable, pixelPlane):
     5                                 ''' compute the diffused energy deposition'''
     6                             
     7                                 # find minimum and maximum locations in x and y
     8  329.422 MiB    0.008 MiB       xMin = min(xArray)
     9  329.422 MiB    0.000 MiB       xMax = max(xArray)
    10  329.422 MiB    0.000 MiB       yMin = min(yArray)
    11  329.422 MiB    0.000 MiB       yMax = max(yArray)
    12                                 # find the row number and col number to use in the track
    13  329.426 MiB    0.004 MiB       rowMin = np.ceil(yMin/10.5) - 3
    14  329.426 MiB    0.000 MiB       rowMax = np.ceil(yMax/10.5) + 3
    15  329.426 MiB    0.000 MiB       colMin = np.ceil(xMin/10.5) - 3
    16  329.426 MiB    0.000 MiB       colMax = np.ceil(xMax/10.5) + 3
    17  329.426 MiB    0.000 MiB       nrow = rowMax - rowMin
    18  329.426 MiB    0.000 MiB       ncol = colMax - colMin
    19                                 # create a track array: nrow x ncol
    20  329.426 MiB    0.000 MiB       track = np.zeros((nrow, ncol))
    21                                 # compute PSF grid
    22  329.438 MiB    0.012 MiB       rowPSF = np.arange(-30, 30.01, 0.5)
    23  329.438 MiB    0.000 MiB       colPSF = rowPSF
    24  329.910 MiB    0.473 MiB       rowPSF2d, colPSF2d = np.meshgrid(rowPSF, colPSF, indexing='ij')
    25  329.914 MiB    0.004 MiB       rowPSF1d = rowPSF2d.flatten()
    26  329.914 MiB    0.000 MiB       colPSF1d = colPSF2d.flatten()
    27                                 # store data
    28  329.914 MiB    0.000 MiB       rows = []
    29  329.914 MiB    0.000 MiB       cols = []
    30  329.914 MiB    0.000 MiB       dE = [] 
    31 1428.457 MiB 1098.543 MiB       for x_1step, y_1step, z_1step,dE_1step in zip(xArray, yArray, zArray, dEArray):
    32 1427.613 MiB   -0.844 MiB           rows.extend(y_1step + rowPSF1d)
    33 1428.066 MiB    0.453 MiB           cols.extend(x_1step + colPSF1d)
    34 1428.457 MiB    0.391 MiB           dE.extend(dE_1step * computePSF(z_1step, psfTable, pixelPlane='top'))
    35 1428.457 MiB    0.000 MiB       rowEdges = np.arange(rowMin*10.5, rowMax*10.5 + 0.01, 10.5)
    36 1428.457 MiB    0.000 MiB       colEdges = np.arange(colMin*10.5, colMax*10.5 + 0.01, 10.5)
    37 1439.832 MiB   11.375 MiB       track, a, b = np.histogram2d(rows, cols, [rowEdges, colEdges], weights=dE) 
    38 1439.832 MiB    0.000 MiB       return track, rowMin, colMin


Filename: /global/scratch/ygzhang/PyBeamDiag/g4Parser.py

Line #    Mem usage    Increment   Line Contents
================================================
     8   34.566 MiB    0.000 MiB   @profile
     9                             def parse(file):
    10                                 '''
    11                                 a parser for G4output.
    12                                 It's easier to parallelize if written as a separate function.
    13                                 '''
    14                                 # initialization
    15   34.566 MiB    0.000 MiB       lineNum = 0
    16   34.566 MiB    0.000 MiB       nTrk = 0 # count number of tracks
    17                                 # load PSF
    18   34.566 MiB    0.000 MiB       psfDir = '/global/scratch/ygzhang/PyBeamDiag/data/psf.mat'
    19  180.066 MiB  145.500 MiB       psf_tmp = loadmat(psfDir)
    20  325.398 MiB  145.332 MiB       psfTable = np.array(psf_tmp['psf'])
    21                                 # prepare files 
    22  325.398 MiB    0.000 MiB       f = open(file, 'r')
    23  325.398 MiB    0.000 MiB       fileIdx = re.split('_', file)[1]
    24  325.398 MiB    0.000 MiB       fLog = open('./W%s_parser.log' % fileIdx, 'w')
    25  325.402 MiB    0.004 MiB       fLog.write('Now parsing file %s\n' % file)
    26  342.359 MiB   16.957 MiB       while True:
    27  342.359 MiB    0.000 MiB           if nTrk == 1:
    28  342.359 MiB    0.000 MiB               break
    29                                 # the while loop will be broken when EOF is reached
    30  325.402 MiB  -16.957 MiB           try: 
    31  325.402 MiB    0.000 MiB               x_tmp = []
    32  325.402 MiB    0.000 MiB               y_tmp = []
    33  325.402 MiB    0.000 MiB               z_tmp = []
    34  325.402 MiB    0.000 MiB               dE_tmp = []
    35  329.402 MiB    4.000 MiB               for line in f:
    36  329.402 MiB    0.000 MiB                   lineNum += 1
    37  329.402 MiB    0.000 MiB                   if line[0] == '*' and x_tmp:
    38  342.332 MiB   12.930 MiB                       break
    39  329.402 MiB  -12.930 MiB                   elif 'physiTracker' not in line:
    40  329.402 MiB    0.000 MiB                       continue
    41  329.402 MiB    0.000 MiB                   elif 'physiTracker' in line:
    42  329.402 MiB    0.000 MiB                       lineSplit = re.split(r'\s*[(), \s]\s*', line)
    43  329.402 MiB    0.000 MiB                       if lineSplit[0] == '':
    44  329.402 MiB    0.000 MiB                           lineSplit = lineSplit[1:]
    45  329.402 MiB    0.000 MiB                       x_tmp.append(float(lineSplit[0]))
    46  329.402 MiB    0.000 MiB                       y_tmp.append(float(lineSplit[1]))
    47  329.402 MiB    0.000 MiB                       z_tmp.append(float(lineSplit[2]))
    48  329.402 MiB    0.000 MiB                       dE_tmp.append(float(lineSplit[6]))
    49                                         else:
    50                                             # executed after 'for' terminates normally
    51                                             # when 'for' terminates normally, it reaches the end of file
    52                                             # then break the while-loop
    53                                             break
    54                             
    55  329.402 MiB    0.000 MiB               fLog.write('Now we are at line #%s\n' % lineNum)
    56  329.406 MiB    0.004 MiB               x = np.array(x_tmp) + 37000./2
    57  329.406 MiB    0.000 MiB               y = np.array(y_tmp) - 2000.
    58  329.406 MiB    0.000 MiB               z = np.array(z_tmp)
    59  329.414 MiB    0.008 MiB               dE = np.array(dE_tmp)
    60  329.414 MiB    0.000 MiB               track, rowMin, colMin = XYZdE2track(x, y, z, dE, psfTable, \
    61                                                 pixelPlane='top')
    62                                 #        del x_tmp, y_tmp, z_tmp, dE_tmp, x, y, z, dE
    63  342.332 MiB   12.918 MiB               gc.collect()
    64  342.332 MiB    0.000 MiB               nTrk += 1
    65  342.332 MiB    0.000 MiB               fLog.write('Now parsing track #%d\n' % (nTrk))
    66  342.332 MiB    0.000 MiB               fLog.write('(rowMin, colMin) = %d, %d\n' % (rowMin, colMin))
    67  342.336 MiB    0.004 MiB               h = fits.Header()
    68  342.340 MiB    0.004 MiB               h['rowMin'] = rowMin
    69  342.340 MiB    0.000 MiB               h['colMin'] = colMin
    70  342.359 MiB    0.020 MiB               fits.writeto('./W%s_%d.fits' % (fileIdx, nTrk), track, h, clobber=True)
    71                                     except ValueError:
    72                                         print 'ValueError\n'
    73                                         continue
    74  338.359 MiB   -4.000 MiB       f.close()


